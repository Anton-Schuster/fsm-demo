(()=>{"use strict";var e={187:e=>{var t,n="object"==typeof Reflect?Reflect:null,i=n&&"function"==typeof n.apply?n.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};t=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var r=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,e.exports.once=function(e,t){return new Promise((function(n,i){function r(n){e.removeListener(t,o),i(n)}function o(){"function"==typeof e.removeListener&&e.removeListener("error",r),n([].slice.call(arguments))}h(e,t,o,{once:!0}),"error"!==t&&function(e,t,n){"function"==typeof e.on&&h(e,"error",t,{once:!0})}(e,r)}))},o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var s=10;function a(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function l(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function u(e,t,n,i){var r,o,s,u;if(a(n),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),o=e._events),s=o[t]),void 0===s)s=o[t]=n,++e._eventsCount;else if("function"==typeof s?s=o[t]=i?[n,s]:[s,n]:i?s.unshift(n):s.push(n),(r=l(e))>0&&s.length>r&&!s.warned){s.warned=!0;var p=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");p.name="MaxListenersExceededWarning",p.emitter=e,p.type=t,p.count=s.length,u=p,console&&console.warn&&console.warn(u)}return e}function p(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function c(e,t,n){var i={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},r=p.bind(i);return r.listener=n,i.wrapFn=r,r}function d(e,t,n){var i=e._events;if(void 0===i)return[];var r=i[t];return void 0===r?[]:"function"==typeof r?n?[r.listener||r]:[r]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(r):f(r,r.length)}function y(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function f(e,t){for(var n=new Array(t),i=0;i<t;++i)n[i]=e[i];return n}function h(e,t,n,i){if("function"==typeof e.on)i.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function r(o){i.once&&e.removeEventListener(t,r),n(o)}))}}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return s},set:function(e){if("number"!=typeof e||e<0||r(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");s=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||r(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return l(this)},o.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var r="error"===e,o=this._events;if(void 0!==o)r=r&&void 0===o.error;else if(!r)return!1;if(r){var s;if(t.length>0&&(s=t[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var l=o[e];if(void 0===l)return!1;if("function"==typeof l)i(l,this,t);else{var u=l.length,p=f(l,u);for(n=0;n<u;++n)i(p[n],this,t)}return!0},o.prototype.addListener=function(e,t){return u(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return u(this,e,t,!0)},o.prototype.once=function(e,t){return a(t),this.on(e,c(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){return a(t),this.prependListener(e,c(this,e,t)),this},o.prototype.removeListener=function(e,t){var n,i,r,o,s;if(a(t),void 0===(i=this._events))return this;if(void 0===(n=i[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete i[e],i.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(r=-1,o=n.length-1;o>=0;o--)if(n[o]===t||n[o].listener===t){s=n[o].listener,r=o;break}if(r<0)return this;0===r?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,r),1===n.length&&(i[e]=n[0]),void 0!==i.removeListener&&this.emit("removeListener",e,s||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,n,i;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var r,o=Object.keys(n);for(i=0;i<o.length;++i)"removeListener"!==(r=o[i])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(i=t.length-1;i>=0;i--)this.removeListener(e,t[i]);return this},o.prototype.listeners=function(e){return d(this,e,!0)},o.prototype.rawListeners=function(e){return d(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):y.call(e,t)},o.prototype.listenerCount=y,o.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},918:(e,t,n)=>{n.r(t),n.d(t,{ErrorType:()=>i,PayloadValidationError:()=>D,SHELL_EVENTS:()=>r,ShellSdk:()=>F});var i,r={Version1:{REQUIRE_CONTEXT:"V1.REQUIRE_CONTEXT",REQUIRE_AUTHENTICATION:"V1.REQUIRE_AUTHENTICATION",CLOSE:"V1.CLOSE",REQUIRE_PERMISSIONS:"V1.REQUIRE_PERMISSIONS",GET_PERMISSIONS:"V1.GET_PERMISSIONS",GET_SETTINGS:"V1.GET_SETTINGS",GET_STORAGE_ITEM:"V1.GET_STORAGE_ITEM",SET_STORAGE_ITEM:"V1.SET_STORAGE_ITEM",SET_VIEW_STATE:"V1.SET_VIEW_STATE",SET_TITLE:"V1.SET_TITLE",RESTORE_TITLE:"V1.RESTORE_TITLE",TO_APP:"V1.TO_APP",GET_FEATURE_FLAG:"V1.GET_FEATURE_FLAG",PRIVATE:{GET_ACCOUNT_SETTINGS:"V1.PRIVATE.GET_ACCOUNT_SETTINGS"},OUTLET:{ADD_PLUGIN:"V1.OUTLET.ADD_PLUGIN",REMOVE_PLUGIN:"V1.OUTLET.REMOVE_PLUGIN",REQUEST_CONTEXT:"V1.OUTLET.REQUEST_CONTEXT",REQUEST_DYNAMIC_CONTEXT:"V1.OUTLET.REQUEST_DYNAMIC_CONTEXT",LOADING_SUCCESS:"V1.OUTLET.LOADING_SUCCESS",LOADING_FAIL:"V1.OUTLET.LOADING_FAIL"},MODAL:{OPEN:"V1.MODAL.OPEN",CLOSE:"V1.MODAL.CLOSE"}},Version2:{GET_STORAGE_ITEM:"V2.GET_STORAGE_ITEM",GET_PERMISSIONS:"V2.GET_PERMISSIONS",MODAL:{OPEN:"V2.MODAL.OPEN"},REQUIRE_PERMISSIONS:"V2.REQUIRE_PERMISSIONS"},Version3:{GET_PERMISSIONS:"V3.GET_PERMISSIONS"},ERROR:"ERROR"};!function(e){e.OUTLET_TIMEOUT="OUTLET_TIMEOUT",e.OUTLET_MAXIMUM_DEPTH="OUTLET_MAXIMUM_DEPTH",e.OUTLET_HTTPS_ERROR="OUTLET_HTTPS_ERROR",e.INVALID_EXTENSION="INVALID_EXTENSION"}(i||(i={}));var o=function(e,t){void 0===t&&(t=[]);var n=t.slice();for(var i in e)"string"==typeof e[i]?n.push(e[i]):"object"==typeof e[i]&&(n=o(e[i],n));return n},s=o(r),a=function(){function e(){this.messages=[]}return e.prototype.push=function(e,t){var n;n="incoming"===e.direction?"yes"===e.handled?"received and handled":"received and skipped":"sending",console.log(t+" "+n+" message: ",e),this.messages.push(e)},e.prototype.all=function(){return this.messages},e.prototype.allTable=function(){console.table(this.all())},e.prototype.filter=function(e){return this.messages.filter((function(t){if(e.type){if(Array.isArray(e.type)&&!e.type.some((function(e){return new RegExp(e).test(t.type)})))return!1;if("string"==typeof e.type&&!RegExp(e.type).test(t.type))return!1}if(e.component){if(Array.isArray(e.component)&&!e.component.some((function(e){return e===t.component})))return!1;if(e.component!==t.component)return!1}return!(e.direction&&e.direction!==t.direction||e.direction&&"incoming"===e.direction&&void 0!==e.handled&&e.handled!==("yes"===t.handled)||e.from&&e.from>t.timestamp||e.to&&e.to<t.timestamp)}))},e.prototype.filterTable=function(e){console.table(this.filter(e))},e}(),l=function(){function e(e,t){if(this.winRef=e,this.debugId=t,this.debugMode=!1,this.debugId){var n=this.winRef.localStorage.getItem("cs.fsm-shell.debug");n&&n.split(",").some((function(e){return e===t}))&&(this.debugMode=!0)}}return e.prototype.traceEvent=function(e,t,n,i,r){if(this.debugMode&&s.some((function(e){return e===t}))){var o={timestamp:new Date,component:this.debugId,direction:e,type:t,handled:"incoming"===e?r?"yes":"no":"n/a",to:i.to,from:i.from,payload:n};this.logEvent(o)}},e.prototype.logEvent=function(e){var t=this.winRef;t.fsmShellMessageLogger||(t.fsmShellMessageLogger=new a),t.fsmShellMessageLogger.push(e,this.debugId)},e}(),u={type:"object",properties:{response_type:{type:"string",enum:["token","code"]}},required:["response_type"]},p={type:"object",properties:{access_token:{type:"string"},expires_in:{type:"number"},token_type:{type:"string"}},required:["access_token","expires_in","token_type"]},c={type:"object",properties:{clientIdentifier:{type:"string"},clientSecret:{type:"string"},cloudStorageKeys:{type:"array",items:{type:"string"}},auth:u,targetOutletName:{type:"string"}},required:["clientIdentifier","clientSecret"]},d={type:"string"},y={type:"string"},f={},h={type:"object",properties:{key:{type:"string"},value:{}},required:["key","value"]},g={type:"object",properties:{key:{type:"string"},value:{}},required:["key","value"]},E={type:"object",properties:{key:{type:"string"},defaultValue:{type:"boolean"}},required:["key","defaultValue"]},v={type:"object",properties:{key:{type:"string"},value:{type:"boolean"}},required:["key","value"]},T={type:"object",properties:{title:{type:"string"}},required:["title"]},m={type:"object",properties:{url:{type:"string"},modalSettings:{type:"object",properties:{title:{type:"string"},size:{type:"string",enum:["l","m","s"]},backdropClickCloseable:{type:"boolean"},isScrollbarHidden:{type:"boolean"}}}},data:{type:"object"},required:["url"]},S={type:"object",properties:{url:{type:"string"},modalSettings:{type:"object",properties:{title:{type:"string"},showTitleHeader:{type:"boolean"},hasBackdrop:{type:"boolean"},backdropClickCloseable:{type:"boolean"},escKeyCloseable:{type:"boolean"},focusTrapped:{type:"boolean"},fullScreen:{type:"boolean"},mobile:{type:"boolean"},mobileOuterSpacing:{type:"boolean"},draggable:{type:"boolean"},resizable:{type:"boolean"},width:{type:"string"},height:{type:"string"},minHeight:{type:"string"},maxHeight:{type:"string"},minWidth:{type:"string"},maxWidth:{type:"string"},isScrollbarHidden:{type:"boolean"}}}},data:{type:"object"},required:["url"]},O={type:"object"},b={type:"object",properties:{objectName:{type:"string"},owners:{type:"array",items:{type:"string"}}},required:["objectName"]},_={type:"object",properties:{objectName:{type:"string"},owners:{type:"array",items:{type:"string"}}},required:["objectName"]},w={type:"object",properties:{objectName:{type:"string"}},required:["objectName"]},I={type:"object",properties:{CREATE:{type:"boolean"},READ:{type:"boolean"},UPDATE:{type:"boolean"},DELETE:{type:"boolean"},UI_PERMISSIONS:{type:"array",items:{type:"number"}}},required:["CREATE","READ","UPDATE","DELETE","UI_PERMISSIONS"]},L={type:"object",properties:{objectName:{type:"string"},owners:{type:"array",items:{type:"string"}},permission:I},required:["objectName","permission"]},M={type:"object",properties:{objectName:{type:"string"},permission:I},required:["objectName","permission"]},R={type:"string"},V={type:"object",properties:{key:{type:"string"},value:{}},required:["key","value"]},N={type:"object",properties:{key:{type:"string"},value:{}},required:["key","value"]},A={type:"object",properties:{key:{type:"string"},value:{}},required:["key","value"]},U={type:"object",properties:{target:{type:"string"},assignmentId:{type:"string"},showMocks:{type:"boolean"},outletSettings:{}},required:["target"]},C={type:"object",properties:{target:{type:"string"},isRootNodeHttps:{type:"boolean"},isConfigurationMode:{type:"boolean"},isPreviewActive:{type:"boolean"},plugin:{}},required:["isConfigurationMode"]},P={type:"object",properties:{target:{type:"string"}},required:["target"]},x={type:"object",properties:{target:{type:"string"}},required:["target"]},k={type:"object",properties:{target:{type:"string"},outletSettings:{}},required:["target"]},j={type:"object",properties:{target:{type:"string"},isRootNodeHttps:{type:"boolean"},isConfigurationMode:{type:"boolean"},areDynamicOutletsEnabled:{type:"boolean"},isPreviewActive:{type:"boolean"},plugins:[]},required:[]},G=function(e,t){return G=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},G(e,t)},D=function(e){function t(t,n){var i=e.call(this,t)||this;return i.name="PayloadValidationError",i.detail=n,i}return function(e,t){function n(){this.constructor=e}G(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}(t,e),t}(Error),F=function(){function e(e,t,n,o,s){var a,G=this;this.target=e,this.origin=t,this.winRef=n,this.outletMaximumDepth=s,this.validator=null,this.validationMode="client",this.allowedOrigins=[],this.ignoredOrigins=[],this.on=function(e,t){return G.subscribersMap.has(e)||G.subscribersMap.set(e,[]),G.subscribersMap.get(e).push(t),function(){G.removeSubscriber(e,t)}},this.onViewState=function(e,t){return G.subscribersViewStateMap.has(e)||G.subscribersViewStateMap.set(e,[]),G.subscribersViewStateMap.get(e).push(t),function(){G.removeViewStateSubscriber(e,t)}},this.off=function(e,t){G.removeSubscriber(e,t)},this.offViewState=function(e,t){G.removeViewStateSubscriber(e,t)},this.onMessage=function(e){if(e.data&&"string"==typeof e.data.type&&(e.source===window.parent||!G.ignoredOrigins||!Array.isArray(G.ignoredOrigins)||0===G.ignoredOrigins.length||-1===G.ignoredOrigins.indexOf(e.origin)))if(e.source!==window.parent&&G.allowedOrigins&&Array.isArray(G.allowedOrigins)&&0!==G.allowedOrigins.length&&-1===G.allowedOrigins.indexOf(e.origin))console.error(e.origin+" is not in the list of known origins");else{var t=e.data;if(t.type!==r.Version1.OUTLET.LOADING_SUCCESS){if(!G.isRoot){var n=e.source;if(n){var o=Array.from(G.outletsMap.keys()).find((function(e){return e.contentWindow===n}));if(o&&o.src){if(new URL(o.src).origin!==e.origin)return void G.debugger.traceEvent("blocked",t.type,t.value,{from:t.from},!1);var s=t.from||[];if(t.type===r.Version1.SET_VIEW_STATE)return void console.warn("[ShellSDk] A plugin tried to update viewState using SetViewState which is not allowed for security reason.");if((t.type===r.Version1.MODAL.OPEN||t.type===r.Version2.MODAL.OPEN)&&0===s.length&&!G.allowedOrigins.some((function(e){return t.value.url.startsWith(e)})))return void console.warn("[ShellSDk] MODAL OPEN url is not in allowedList.");if((t.type===r.Version1.OUTLET.REQUEST_CONTEXT||t.type===r.Version1.OUTLET.REQUEST_DYNAMIC_CONTEXT)&&s.length>=G.outletMaximumDepth)n.postMessage({type:r.Version1.OUTLET.LOADING_FAIL,value:{target:t.value.target,error:i.OUTLET_MAXIMUM_DEPTH},to:s},G.origin);else{var a=G.outletsMap.get(o);a&&a.uuid&&(t.type===r.Version1.REQUIRE_CONTEXT&&0===s.length&&void 0!==a.name&&(t.value.targetOutletName=a.name),s=s.concat([a.uuid]),G.debugger.traceEvent("outgoing",t.type,t.value,{from:s},!0),G.target.postMessage({type:t.type,value:t.value,from:s},G.origin))}return}if(n!==G.target)return}if(t.type===r.Version1.SET_VIEW_STATE){G.outletsMap.forEach((function(e,n){n.contentWindow&&n.contentWindow.postMessage({type:t.type,value:t.value},G.origin)}));var l=G.subscribersViewStateMap.get(t.value.key);if(G.debugger.traceEvent("incoming",t.type,t.value,{},!!l),l)for(var u=0,p=l;u<p.length;u++)(0,p[u])(t.value.value);return}if((t.type===r.Version1.OUTLET.REQUEST_CONTEXT&&t.value.hasOwnProperty("isConfigurationMode")&&!t.value.hasOwnProperty("target")&&!t.value.hasOwnProperty("plugin")||t.type===r.Version1.OUTLET.REQUEST_DYNAMIC_CONTEXT&&t.value.hasOwnProperty("areDynamicOutletsEnabled")&&!t.value.hasOwnProperty("target")&&!t.value.hasOwnProperty("plugins"))&&G.outletsMap.forEach((function(e,n){n.contentWindow&&n.contentWindow.postMessage({type:t.type,value:t.value},G.origin)})),t.to&&0!==t.to.length&&t.type!==r.Version1.TO_APP)return G.debugger.traceEvent("outgoing",t.type,t.value,{to:t.to},!0),void G.outletsMap.forEach((function(e,n){t.to&&-1!==t.to.indexOf(e.uuid)&&n.contentWindow&&n.contentWindow.postMessage({type:t.type,value:t.value,to:t.to.filter((function(t){return t!==e.uuid}))},G.origin)}))}var c=G.subscribersMap.get(t.type);G.debugger.traceEvent("incoming",t.type,t.value,{from:t.from},!!c);var d=null;if(G.isRoot||t.type!==r.Version1.REQUIRE_CONTEXT||(d="string"==typeof t.value?JSON.parse(t.value):t.value,G.isInsideModal=!!d.isInsideShellModal),c)for(var y=0,f=c;y<f.length;y++)(0,f[y])(t.value,e.origin,t.type===r.Version1.SET_VIEW_STATE?null:t.from,e);if(!G.isRoot&&t.type===r.Version1.REQUIRE_CONTEXT){var h=d.viewState;if(h)for(var g=0,E=Object.keys(h);g<E.length;g++){var v=E[g];if(l=G.subscribersViewStateMap.get(""+v))for(var T=0,m=l;T<m.length;T++)(0,m[T])(h[v])}G.target.postMessage({type:r.Version1.OUTLET.LOADING_SUCCESS},G.origin)}}}},this.subscribersMap=new Map,this.subscribersViewStateMap=new Map,this.outletsMap=new Map,this.initMessageApi(),this.debugger=new l(n,o),this.isRoot=null==e,this.isInsideModal=!1,this.eventValidationConfiguration=((a={})[r.Version1.REQUIRE_AUTHENTICATION]={request:{schema:u,validationFunction:null},response:{schema:p,validationFunction:null}},a[r.Version1.REQUIRE_CONTEXT]={request:{schema:c,validationFunction:null}},a[r.Version1.GET_STORAGE_ITEM]={request:{schema:d,validationFunction:null},response:{schema:f,validationFunction:null}},a[r.Version2.GET_STORAGE_ITEM]={request:{schema:y,validationFunction:null},response:{schema:h,validationFunction:null}},a[r.Version1.SET_STORAGE_ITEM]={request:{schema:g,validationFunction:null}},a[r.Version1.GET_FEATURE_FLAG]={request:{schema:E,validationFunction:null},response:{schema:v,validationFunction:null}},a[r.Version1.SET_TITLE]={request:{schema:T,validationFunction:null}},a[r.Version1.MODAL.OPEN]={request:{schema:m,validationFunction:null}},a[r.Version2.MODAL.OPEN]={request:{schema:S,validationFunction:null}},a[r.Version1.MODAL.CLOSE]={request:{schema:O,validationFunction:null}},a[r.Version1.GET_PERMISSIONS]={request:{schema:b,validationFunction:null},response:{schema:I,validationFunction:null}},a[r.Version2.GET_PERMISSIONS]={request:{schema:_,validationFunction:null},response:{schema:L,validationFunction:null}},a[r.Version3.GET_PERMISSIONS]={request:{schema:w,validationFunction:null},response:{schema:M,validationFunction:null}},a[r.Version1.GET_SETTINGS]={request:{schema:R,validationFunction:null},response:{schema:V,validationFunction:null}},a[r.Version1.SET_VIEW_STATE]={request:{schema:N,validationFunction:null},response:{schema:A,validationFunction:null}},a[r.Version1.OUTLET.REQUEST_CONTEXT]={request:{schema:U,validationFunction:null},response:{schema:C,validationFunction:null}},a[r.Version1.OUTLET.REQUEST_DYNAMIC_CONTEXT]={request:{schema:k,validationFunction:null},response:{schema:j,validationFunction:null}},a[r.Version1.OUTLET.ADD_PLUGIN]={request:{schema:P,validationFunction:null}},a[r.Version1.OUTLET.REMOVE_PLUGIN]={request:{schema:x,validationFunction:null}},a)}return e.init=function(t,n,i,r,o){return void 0===i&&(i=window),void 0===r&&(r=""),void 0===o&&(o=1),e._instance=new e(t,n,i,r,o),e._instance},Object.defineProperty(e,"instance",{get:function(){if(!e._instance)throw new Error("ShellSdk wasn't initialized.");return e._instance},enumerable:!0,configurable:!0}),e.isInsideShell=function(){var e=window;return e.self!==e.top},e.prototype.isInsideShellModal=function(){return this.isInsideModal},e.prototype.setAllowedOrigins=function(e){void 0===e&&(e=[]),this.allowedOrigins="*"===e?[]:e},e.prototype.addAllowedOrigin=function(e){var t;try{t=new URL(e)}catch(e){return}this.allowedOrigins.push(t.origin)},e.prototype.removeAllowedOrigin=function(e){var t;try{t=new URL(e)}catch(e){return}var n=this.allowedOrigins.findIndex((function(e){return e===t.origin}));this.allowedOrigins=this.allowedOrigins.filter((function(e,t){return t!==n}))},e.prototype.isOriginAllowed=function(e){var t;try{t=new URL(e)}catch(e){return!1}return this.allowedOrigins.some((function(e){return e===t.origin}))},e.prototype.setIgnoredOrigins=function(e){void 0===e&&(e=[]),this.ignoredOrigins=e},e.prototype.addIgnoredOrigin=function(e){var t;try{t=new URL(e)}catch(e){return}this.ignoredOrigins.push(t.origin)},e.prototype.removeIgnoredOrigin=function(e){var t;try{t=new URL(e)}catch(e){return}var n=this.ignoredOrigins.findIndex((function(e){return e===t.origin}));this.ignoredOrigins=this.ignoredOrigins.filter((function(e,t){return t!==n}))},e.prototype.setValidator=function(e,t){void 0===t&&(t="client"),this.validator=e,this.validationMode=t},e.prototype.registerOutlet=function(e,t){this.outletsMap.set(e,{uuid:"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)})),name:t})},e.prototype.unregisterOutlet=function(e){this.outletsMap.delete(e)},e.prototype.getTarget=function(){return this.target},e.prototype.setTarget=function(e,t){(this.target!==e||this.origin!==t)&&(this.target=e,this.origin=t)},e.prototype.emit=function(e,t,n){if(!this.postMessageHandler)throw new Error("ShellSdk wasn't initialized, message handler not set.");if(this.validator&&this.eventValidationConfiguration[e]){var i="client"===this.validationMode?this.eventValidationConfiguration[e].request:this.eventValidationConfiguration[e].response;if(i){i.validationFunction||(i.validationFunction=this.validator.getValidationFunction(i.schema));var r=i.validationFunction(t);if(!r.isValid)throw new D("Payload validation failed",r.error)}}this.postMessageHandler(e,t,this.isRoot?n:void 0)},e.prototype.setViewState=function(e,t){if(!this.postMessageHandler)throw new Error("ShellSdk wasn't initialized, message handler not set.");this.postMessageHandler(r.Version1.SET_VIEW_STATE,{key:e,value:t})},e.prototype.removeSubscriber=function(e,t){var n=this.subscribersMap.get(e);n&&this.subscribersMap.set(e,n.filter((function(e){return e!==t})))},e.prototype.removeViewStateSubscriber=function(e,t){var n=this.subscribersViewStateMap.get(e);n&&this.subscribersViewStateMap.set(e,n.filter((function(e){return e!==t})))},e.prototype.initMessageApi=function(){var e=this;this.postMessageHandler=function(t,n,i){if(!e.target)throw new Error("ShellSdk wasn't initialized, target is missing.");if(!e.origin)throw new Error("ShellSdk wasn't initialized, origin is missing.");e.debugger.traceEvent("outgoing",t,n,{to:i},!0),e.target.postMessage({type:t,value:n,to:i},e.origin)},this.winRef.addEventListener("message",this.onMessage)},e.VERSION="1.19.0",e.BUILD_TS="2023-09-04T13:53:53.274Z",e}()},38:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ShellSdkHelper=void 0;const i=n(918),r=n(187);class o{constructor(e){this.newTokenEmitter=new r.EventEmitter,this.getContext=()=>new Promise(((e,t)=>{this.shellSdk.emit(i.SHELL_EVENTS.Version1.REQUIRE_CONTEXT,{auth:{response_type:"token"}}),this.shellSdk.on(i.SHELL_EVENTS.Version1.REQUIRE_CONTEXT,(t=>{const n=JSON.parse(t);this.initializeRefreshTokenStrategy(n.auth),e(n)}))})),this.initializeRefreshTokenStrategy=e=>{this.shellSdk.on(i.SHELL_EVENTS.Version1.REQUIRE_AUTHENTICATION,(e=>{this.newTokenEmitter.emit("newToken",e),setTimeout((()=>this.fetchToken()),1e3*e.expires_in-5e3)})),setTimeout((()=>this.fetchToken()),1e3*e.expires_in-5e3)},this.shellSdk=e}static getInstance(e){return o.instance||(o.instance=new o(e)),o.instance}getNewTokenEmitter(){return this.newTokenEmitter}fetchToken(){this.shellSdk.emit(i.SHELL_EVENTS.Version1.REQUIRE_AUTHENTICATION,{response_type:"token"})}}t.ShellSdkHelper=o}},t={};function n(i){var r=t[i];if(void 0!==r)return r.exports;var o=t[i]={exports:{}};return e[i](o,o.exports,n),o.exports}n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{const e=n(38),t=n(918),i=e=>{document.querySelectorAll("#iframe_wrapper")[0].innerHTML=e};window.addEventListener("load",(async()=>{let n,r="";if(t.ShellSdk.isInsideShell()){let s=t.ShellSdk.init(parent,"*"),a=e.ShellSdkHelper.getInstance(s);const l=await a.getContext();n=l,await o(n),a.getNewTokenEmitter().on("newToken",(async e=>{let t={...n,auth:e};await o(t),i(r)}))}async function o(e){var t;const n=await async function(e,t){const n={"Content-Type":"application/json","X-Account-Name":e.account,"X-Company-Name":e.company,Authorization:`bearer ${e.auth.access_token}`};return fetch(`https://${e.cloudHost}/service-management/api/v2/composite-tree/service-calls/id=${t}`,{headers:n}).then((e=>e.json()))}(e,e.viewState.selectedServiceCallId);(null===(t=n.udfValues)||void 0===t?void 0:t.length)>0&&(r=`<iframe src="${n.udfValues[0].value}" width="100%" height="100%" frameborder="0"></iframe>`)}i(r)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,